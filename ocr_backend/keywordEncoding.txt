 We're going to see how far we can get today let's just jump right into Where we left off so we left off with this procedure called Explorer We talked about how it would terminate right because It's going to only encounter each vertex atmo Most one time and it will never encounter or never visited vertex More than one cell Define number of vertices so it should terminate what I'm going to attempt to do now Prove its correctness so to prove and algorithms correctness need to know what the algorithm is trying to Does anybody know what the goal of Explorer is gay Give me the graph and a starting for a text what do you want to happen You want to set this visited value to be true for each Vertex that is reachable from the starting for a text okay so This is a proof technique that's used a lot in graph algorithms especially when When you're talking about whether or not vertices are connected I talked to does anybody know Russell from the CSE Department Heat He calls this like the the first time failure proof method or something like that basically what we're going Going to do is do a proof by contradiction We're going to assume that algorithm doesn't work and figure out the first time it doesn't work and show that There's a contradiction so we talked about What the goal is so what would happen let's say okay let's do it with a say like this What would what would we have to say would happen The algorithm did work if the algorithm failed what we know to be true That A vertex Oh oh oh right right okay I thought it would be reachable but the algorithm wouldn't Detective Rides at the algorithm was not correct What would write it wouldn't turn This is this is how we're going to prove its the contradiction is going to be there exists a You that is reachable from the but the algorithm doesn't Set its value to be true So if it's reachable from V that means that there exists a path from V2 To you And since you is not true we know that be is true right that's just the first Part of algorithm it's said to be true we know he is true and we know you was not true So there's a point in this past where we find the first time it's fall We have this is true This is false Night so there's a first time that it's false let's just say the first time that it's fall What is w Everything's true up until that point So we get to see it is we set a value to be true right It was false initially so what happens after you set a Vertex to be true Right you look at all of the notes right you you look through all of the edges that are Adjacent to it and you check if they're visited And if they're not visited yet then you explore them So W is a neighbor of Z so when we explore Z The encounter w WS Falls So We explore W and what's the first thing you do when you explore as you said it to be true Frank suck So I'm Basically if she has been in Explored Then double you must Beset Two And there's your contradiction Any questions Okay So what do I say at some point see was that the true that you look through all the vertices including ww has not Habitat the truth so you explore W instead it to true Okay how long does it take well we We in in the worst case we may have to visit all of the vertices right and every time you Visit of vertex you have to look through all of its neighbors right so every time you're at a vertex You have to do degree of the many Steps and so does anybody know what this sum is Yeah so this is a undirected graph So they don't have any directions to the degree of V is just however many edges are incident with B Everybody now Two times because you Okay so basically you have to visit all the eggs all the vertices And you have to visit twice Signs true to the vertices and then checks all of these edges when it is visited each birthday This algorithm has a run time of Big O V plus In this class we're always going to say this is Lenny your time okay so whenever I ask you to design Graph algorithm that runs in linear time This is what I'm looking for So Any questions Okay So what if we want to keep track of the pads Right what what we've done so far is Explore will set true to all the vertices that are reachable from starting for a text But sometimes that's not That's not so useful maybe you actually want to know how to get there right when we're looking at the May Problem Did you just run Explorer as it is all you're going to know is whether or not the bird can reach the tree But what's more useful is to know exactly how to get there Frank so we're going to introduce A small piece of code it's an array of We're calling it previous or pre and basically whenever you Find a Vertex that hasn't been visited You said its previous value to the vertex that came right before it So what this does is it is it to find a tree we're going to see that in a minute Okay so let's do an example We're going to Explore G Na we're going to start at 8 And I'm In this class the default Usually on my vertices are all alphabetical the default unless I say otherwise is that we're going to To always go in alphabetical order if there is a choice Okay so Reset a to be true Visited A is true That's this part Now for each Edge Vu so for each Edge coming out of how many edges are coming Amun-ra 3 in so we're just going to look through them And we're just going to respect the alphabetical ordering so the first one we're going to encounter a Be right okay so be has not been visited so we Set previous Abby To be equal to a And then We explore Gob Right Williamsport GOP you said visited B2B true And then you look through The edges Incident with B so what's the first and you look at A husband visited so this this if statement you just don't If you don't go to that condition And then you You move along to the next to the next Edgewood BC So you said previous 5 C to PB and then you explore I got this is a very tedious way of Showing algorithm Instead what I'm going to do is I'm just going to build the tree as we go okay And the um The previous values like the previous thing that's going to be shown by a tree Chuseok so let's just go like that so we started we go to be Beach XA it's been visited Beach XC so it's not been visited so put in The triage so she is a dead end right so then you break out of the Floor C algorithm and you continue looking at the edges of bee So the next edge of being you look at Izzy And then you look at And then J And then Jay looks at a butt has been visited so So you break out of that Explorer Is also a dead end cuz it doesn't have any other New vertices And also and we get back to B and B is also a dead end Then you go back to a day now goes to f F goes to Gigi Hadid Ideas a dead-end to go back to G and you go to H Okay are there any questions about that So here I do it little bit nicer Alright so this thing is called a DFS tree or a DFS output tree if you like And what do you notice about the difference between the DFX output tree and the original Right so this is a tree and this is this actually has some Cycles in it right Which means that there are edges that we've missed What are the ages that we've missed AJ rank What else bti Did it PayPal right but those those are not Does. Didn't even get discovered But that's fine that's that's what we want our algorithm to do is is skip over those because those are not Connected to the starting for text Okay So These These red lines are called back edges and the black lines are called tree edges Okay so let me just say a few things about this You can't you can't look at a graph and tell which ones are back edges you have to do that Algorithm Packages are dependent on The output tree of the outer it okay so Definition packages Packages in an undirected graph that has been explored or edges and G that are not in the DFS tree Update So what do back I just tell you about the graph There's a loop there's a cycle right so if you find a package there's a cycle if there's a cycle that you will You'll find a package And how do you know if an egg is a package Is missing from the tree and so there's a few ways you can do it you could You could eat eggs to be true or to be visited As you go through the tree And then go back and check if there are any edges that you've met So that's how I would do it Assign Visited Age to be true If age Is What's a good for Trevor During Explorer Then after Check Any Visited Age is false What's up this is the this is a good way to figure out if there are any Cycles in the grass 3 questions Aren't So um Notice of the other thing that it did was it only found one connect to component right and it left the other one Unexplored Is exactly what we wanted to do so that's fine Go to examine the rest of the graph we need to restart the Explorer on the other connected components If we really want to know the structure of the entire draft Okay before we do that I wanted to give you kind of a little hint about one of the homework problems So Noticed that when you have your tree right when you have your DFS tree if you remove one of the packages The tree is still connected And basically what the theorem it says is that if you remove the edge that's part of a cycle Pendergrass stays connected And if you remove an edge that's not part of a cycle then the graph will become disconnected Cancel this That's that's that's This little thing this might help you on one of the homework problems Okay so now we're going to look at another algorithm that uses Explorer What the purpose of this algorithm is to do is to count the number of connected components Pet Shop We're just going to call this depth-first search and I just called it that because the I'm just following the book this is what the book called. Basically what it does is it initializes is this variable called cc Distance for connected component And what we hope that it does Is go to the graph and count how many connected components there are So by the end of the process CC will be equal to the number of connected components Okay so let's look at this first weekend if she lies Everything to be false And then we Loop through all the vertices of the graph The disjoint parts So I'm it looks to the vertices so the first vertex you encounter it It is not visited yet right because we initialize everything to befall Sedan you increment CC Right because you've encountered a new connect to component then you explore that protects and we all know what explorer Or does it sets true to all the vertices reachable from that starting for a text Right so then once Explorer is done You continue along this This Loop Until you find A Vertex that has not been discovered What does that mean if you found a Vertex that is not been discovered that means that that vertex is not Part of that first connected component that you've done So then you increment Cece and your support Let's look at an example Remember we're going to By default run through the vertices in alphabetical order So first we set them all to be false Let's just Remember that in our heads and then the next thing we do is we start at 8 If a is not visible to oh yeah first thing we do the CCA is not visited Rent So you set a to be visited Annual increment cctv1 Wright Venue Explorer That's what we did this we did this and now we're doing this exploring we go to be We got us We go to a Right Go back to FB is a dead end Is there a custody Okay so that that was Explorer and now a BF and have all been visited right the visited value has been said the truth So then we go to the next vertex With this look so what's the next vertex we look at Be right Missing a thank you The next vertex you look at is B B has been visited So this Conditional doesn't do anything and you just move to the next vertex next for Texas C She has not been visited so you increment CC And you sexy to be able to true and explore sea Okay now are we done now What's up Receipt Yeah we explored see now what's the next thing it does it looked at Right He has been visited but does nothing it looks like he has been visited it does nothing it just goes It finishes up looping through this lupier Until I get to the end of the loop and then they'll go to them terminate Yeah I guess I don't know somebody somebody said a similar thing of another graph to So now I think it's a Supposed to be there I think it's just when I printed it it might have skipped that Notation I'll let you know the other the other thing that they caught Okay so let's move along to another Another addition to the Alberta? So I'm just calling this TFS because that's what the book does DFS in general is just kind of like a Concept the concept is you you explore the graph By going as deep as you possibly can that's why it's called depth-first search And so in some contacts you'll see that DFS is just Explorer But in this book that were using they called DFS of this hole algorithm that kind of explores the The whole track Just kind of thought AR convention Alright so we're going to add another thing into this algorithm Pre and post numbers so what you can think about for pre and post numbers is thing Think about it as you're putting the vertices into a stack And every time you do an operation the clock increments Okay so Every time you put a Vertex on to the Stacked you would sign it a free number And every time you pop over text off of the Stacked you would sign it it supposed number So are you Initialize the clock and you put these two Subroutines in there I wanted to I want to do it like that sorry Clock Hotspot And basically what it does is before you Floor the vertex well I can say that after you assign the vertex to be true then like right after you do that you would sign it spree number Then you look at all of its ashes outgoing edges and explore all of that area and when you When you're done with that you come back to that vertex and you assign it is supposed to So let's look at an example Oh I wanted to say something Pre and post numbers they don't have much use in directed with directed Undirected graph We're really going to see them useful with directed graphs as you'll see in this next example Okay so We're running DFS on this Okay song Be the guy in the other class said that this This is from ETA is not on the spot under Is that right Okay. If you guys are following from the slides posted on the website draw that edge Okay so we're running DFS so we're going to set CC Need to be zero and then we see a and we get a Reset a to be true And we assign like this I'm going to write its post number on the left and it's free number on the left is posted on the right A has assigned us a day with one right then you look at all of The edges coming out of a There's only one right COC You said that to me too And then she has three edges coming up so which one do you look at first B PS3 Okay now he has to adjust coming out so which one do you look at first Hey right hey has been visited So You Move Along 2 Okay so she is a dead end Rent so you basically that means you're going to pop the out of the stack so what we've done so far as we put A on the Stacked and see that be the DD is it dead-ends you pop the out and you a sign it is Post number of 5B is also at 10:10 so you pop that out 6 Penske has still a few places to go right there you're not done exploring C So you don't pop it out yet So you go to Can you assign it a pre number of 7 And then the next one is f 8 Episode dead end sign G10 11 And then Pretty much done so I just signed the post numbers 1213 14 15 16 Any questions So I want you guys to try this Again if you're looking at the slides then draw in this this Edge from U2 Now run DFS on here But I want you to look through the at the vertices in Reverse alphabetical order keep track of the pre Compose numbers and keep track of the CC variable So I should see you should start out something like this species Hero then we're going in reverse alphabetical order so we're starting with h Can you assign the first pre number to be one Tomorrow I'm going to start doing it if so we can follow Which goes to Two Today Three Okay and then 4 6 Sexiest women Did the next one is G Okay is that what you guys got So notice a few things about this the clock keeps I'm going right it doesn't stop when you jump it doesn't reset when you jump to a new connected component And what are we noticed about connect this is a variable connected components CC Is not very useful for directed graphs is it I mean We were really interested in information where it doesn't depend on the order that you That you love Encounter the vertices Maybe just showed right that given two different ordering One of them we got one connected component one of them we got three connected components oh The conclusion here is that for directed graph this CC variable Doesn't tell you the number of connected components racing His face it doesn't really give a lot of information we're going to see how to use it to our advantage Probably starting on Wednesday But for right now it doesn't have much meaning Are there any questions Alright so let's go back to The first graph we did now Are there any edges that we missed Let's see ETA Right C to F F.2d What is a eth H2 app BJ Okay I think that's it Right So just like with undirected graph right When you do your DFS output tree there are certain edges that you missed right because You have a graph and turning it into a tree But with directed graph there are three different kinds of edges that are not part of the Output tree Okay there are things called Packages Forward edges Ben Cross edges Again these are just like the labeling of these age This is completely determined by the algorithm right You'll see that An edge might be a package on this TFS output tree but all in Slide when we did it the reverse way it may not be a package rights up to Define Something as a back as you first have to construct the DFS output tree Okay so what are the What are the definitions of these three things A package goes from a descendant to ancestor A forward Edge goes from an ancestor to a descendant and a cross Edge goes The cross-eyed you're just another Forward or back I mean It looks like From from F to D that's like a That would be like a cousin right This is the parents because Ian BR Brothers Sisters And the children of B&E are cuz it's okay what about from H2 app That would be like a Uncle right so if it's not grandpa or granddaughter or Something like that then it's a cross Edge Questions I'm glad I'm glad you asked that What are the uses of back Edge forward Edge and cross stitch There's no use for cross edges or forward edges Packages tell you something about the graph Right What what is it that they tell you If there's a cycle forward edges and cross edges they don't really tell you much And tell you A lot of packages are the ones that are important But I needed to classify them all so that we can tell the difference Okay so um Let's see here What were the ages that we missed here C to F These guys aren't even related cute that's a package B2d BJ I see that I did that c2e E2f Eth G2g NG th Pizza We have so that we may not even get the same number of packages from graph to graph right but What what they do tell us is if there is a cycle and in fact It is the case that every one of these packages in this graph is part of a cycle And I'm Similarly Will we have when we have two packages here And eat one of these packages Is part of a cycle Okay questions Alright so here are the definitions of the different Edge types there's the tree as right that's What kind of bomb is Clear there's the package A descendant leading to an ancestor a forward Edge is an ancestor leading to a descendant this is Maybe you should put something in here like a Ford edges least to a descendant and is Not Patriot But like you said they don't really matter the forward I just in the cross such as they don't tell us much Okay so Across ages an ancestor descendant that the term Package has a different meaning when you're talking about an undirected graph and a directed graph Goodnight you're going to see that come up a lot we're going to have the same words for these two different con And they're going to have slightly different meanings Okay so Does anybody have any idea how we can tell Whether or not an edge is a package or a Weather not an edge of the package Right good that's that's the biggest reason that were using pre numbers and post Those numbers is so that we can find packages because we're going to see that it's important to Know if there is a cycle in the graph Because if there's no cycle in the graph then we have this thing called a dad Directed acyclic graph and those have a lot of great properties and there's a lot of fish Algorithms that you can do on bags that you can't do on Just regular directed graph so it's it's in our best interest to try to see if the Graph is a dad before we Trying algorithm on Excel this is dumb What is one way to do that okay so what is the formula well I want you guys to notice a few things A.m. An ancestor the ancestors of pre and post numbers Volbeat will contain all of its children's pre and post numbers Right if you think about them as an interval for example Let's go let's go back here instead Let's see H is A descendant Right He is the grandfather of the h And look at the post numbers We have Me Goes from 7 to 14 NH goes from 11 to 12 See see how the The Descendants post numbers are contained as an interval Entirely within its ancestor in one way to think about this is the whole Stack Idea right somebody's appearance of another vertex as a parent Or ancestor of another text if you put that vertex in the stack put the put the descendant in and then Take the send it out for you take the parent so if we have this idea of Pre and post numbers To tell whether of an edge of the back at all we have to do is see if it's If its head The vertex that it comes out of I'm have pre and post numbers entirely within its tail Vertex that goes into Here are The definitions of the edges in terms of their pre and post numbers but this one really is the most Until all that means is You B is a package if If you put me first into the stack then you take you out and take me out Okay so Just like in the class before I didn't quite get to the part of class I wanted to You cover the homework entirely so I may be removing one of The homework problems from the homework because I also thought that we'd still have time to cover it before the homework was due but then I remember that we have a Holiday this coming week so I'll send a post out in Piazza formalizing it but what I would like you to do is Look through the slides they're posted and look through the book it It goes through a way of using the post numbers to linearize a tag okay so where it We're going to cover it on Wednesday in detail but maybe this would be a nice way to To prepare yourself for Wednesdays lecture okay have a great Long weekend everyone So are you